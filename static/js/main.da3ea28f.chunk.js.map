{"version":3,"sources":["assets/twitter-logo.svg","App.js","reportWebVitals.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","MY_CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","setupEventListener","chainId","alert","connectWallet","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","on","from","tokenId","toNumber","error","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","useEffect","className","onClick","alt","src","twitterLogo","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da3ea28f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.ab177c79.svg\";","import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, {useEffect, useState} from \"react\";\nimport { ethers } from 'ethers';\nimport myEpicNft  from './assets/utils/MyEpicNFT.json';\n\n// Constants\nconst TWITTER_HANDLE = 'realpaperhands';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\nconst MY_CONTRACT_ADDRESS = '0xecf20a449f7ddb64C083242d009f187D71117fDd';\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const checkIfWalletIsConnected = async () => {\n    /*\n    * First make sure we have access to window.ethereum\n    */\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    // check if we are authorized to access the user's wallet\n    const accounts  = await ethereum.request({method:'eth_accounts'});\n    \n    // user can have multiple accounts, we grab the first one\n    if(accounts.length !== 0){\n      const account = accounts[0];\n      console.log('Found an account', account);\n      setCurrentAccount(account);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener()\n\n      let chainId = await ethereum.request({ method: 'eth_chainId' });\n      console.log(\"Connected to chain \" + chainId);\n\n      // String, hex code of the chainId of the Rinkebey test network\n      const rinkebyChainId = \"0x4\"; \n      const ropstenChainId = \"0x3\"; \n      if (chainId !== ropstenChainId) {\n\t      alert(\"You are not connected to the ropsten  Test Network!\");\n      }\n    }else{\n      console.log('no account found');\n    }\n  } \n\n  // connect wallet method implementation\n  const connectWallet = async () => {\n    try{\n      const {ethereum} = window;\n\n      if(!ethereum) {\n        alert(\"Get metamast!\");\n        return;\n      }\n\n      // method to req access to account\n      const accounts = await ethereum.request({method:\"eth_requestAccounts\"});\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n       // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener()\n    }catch(err){\n      console.log('Catch err',err);\n    }\n  }\n\n    // Setup our listener.\n    const setupEventListener = async () => {\n      // Most of this looks the same as our function askContractToMintNft\n      try {\n        const { ethereum } = window;\n  \n        if (ethereum) {\n          // Same stuff again\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const connectedContract = new ethers.Contract(MY_CONTRACT_ADDRESS, myEpicNft.abi, signer);\n  \n          // THIS IS THE MAGIC SAUCE.\n          // This will essentially \"capture\" our event when our contract throws it.\n          // If you're familiar with webhooks, it's very similar to that!\n          connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n            console.log(from, tokenId.toNumber())\n            alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${MY_CONTRACT_ADDRESS}/${tokenId.toNumber()} or you can check on here as sometimes it updates early https://ropsten.rarible.com/token/${MY_CONTRACT_ADDRESS}:${tokenId.toNumber()}`)\n          });\n  \n          console.log(\"Setup event listener!\")\n  \n        } else {\n          console.log(\"Ethereum object doesn't exist!\");\n        }\n      } catch (error) {\n        console.log(error)\n      }\n    }\n\n  const askContractToMintNft = async () => {\n  \n    try{\n      const { ethereum } =window;\n      if(ethereum){\n        //ethers is a library that helps our frontend talk to our contract\n        const provider = new ethers.providers.Web3Provider(ethereum);\n\n        //A \"Provider\" is what we use to actually talk to Ethereum nodes.\n        // Remember how we were using Alchemy to deploy? Well in this case\n        // we use nodes that Metamask provides in the background to send/receive\n        // data from our deployed contract.\n        const signer = provider.getSigner();\n\n        // creates the connection to our contract. It needs: the contract's address,\n        // something called an abi file, and a signer. These are the three things we\n        // always need to communicate with contracts on the blockchain.\n        const connectedContract = new ethers.Contract(MY_CONTRACT_ADDRESS,myEpicNft.abi,signer);\n\n        console.log(\"Going to ask for gas\");\n        let nftTxn = await connectedContract.makeAnEpicNFT()\n\n        console.log(\"Mining in progress\");\n        await nftTxn.wait();\n\n\n        console.log(`Mined, see transaction: https://ropsten.etherscan.io/tx/${nftTxn.hash}`);\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    }catch(err){\n      console.log(err)\n    }\n  }\n\n  /*\n  * This runs our function when the page loads.\n  */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to your core(<i>wallet</i>)\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n      Mint NFT\n    </button>\n  )\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">RealPaperHands <b>NFT</b> Collection</p>\n          <p className=\"sub-text\">\n            These one to HODL and show the <u>IRON</u> will of yours.\n          </p>\n          {currentAccount === \"\" ?renderNotConnectedContainer () : renderMintUI()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}